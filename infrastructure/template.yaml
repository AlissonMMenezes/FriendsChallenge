#
#
# It is a CloudFormation template that provision an intire infrastructure to deploy applications on top of kubernetes
#
#
Parameters:
  DBUser:
    Type: "String"
  DBPassword:
    Type: "String"

Resources:
  # IAM Role for deploy de EKS Cluster
  eksrole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  # VPC to run the infrastructure
  challengevpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: "192.168.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
  
  # InternetAccess to VPC
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: 
        Ref: challengevpc
  
  #Creating routes
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: challengevpc
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
    
  # Security group that allows all traffic
  challengesg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
          Ref: challengevpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  # Subnet A - that runs in us-east-2a
  challengesubneta:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: "us-east-2a"
      CidrBlock: "192.168.64.0/18"
      VpcId:
        Ref: "challengevpc"

  # Subnet B - That runs in us-east-2b
  challengesubnetb:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: "us-east-2b"
      CidrBlock: "192.168.128.0/18"
      VpcId:
        Ref: "challengevpc"

  # Subnets accessing internet 
  subnetaAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: challengesubneta
      RouteTableId:
        Ref: RouteTable

  subnetBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: challengesubnetb
      RouteTableId:
        Ref: RouteTable

  # S3 Bucket to store images
  alissonfriendsbucket:
    Type: AWS::S3::Bucket

  # EKS Cluster to deploy application
  challengecluster:
    Type: AWS::EKS::Cluster
    Properties: 
      Name: "challenge"
      ResourcesVpcConfig: 
        SubnetIds:
        - Ref: "challengesubneta" 
        - Ref: "challengesubnetb" 
      RoleArn: !GetAtt eksrole.Arn
  
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId:
        Ref: challengevpc
      Tags:
        - Key: !Sub kubernetes.io/cluster/challenge
          Value: owned

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: challengesg
    Properties:
      Description: Allow node to communicate with each other
      GroupId:
        Ref: "challengesg"
      SourceSecurityGroupId: 
        Ref: "challengesg"
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: challengesg
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId:
        Ref: challengesg
      SourceSecurityGroupId:
        Ref: challengesg
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: challengesg
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId:
        Ref: challengesg
      DestinationSecurityGroupId:
        Ref: challengesg
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: challengesg
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId:
        Ref: challengesg
      SourceSecurityGroupId:
        Ref: challengesg
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: challengesg
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref challengesg
      DestinationSecurityGroupId:
        Ref: challengesg
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  challengesgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: challengesg
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref challengesg
      SourceSecurityGroupId:
        Ref: challengesg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: "2"
      LaunchConfigurationName:
        Ref: NodeLaunchConfig
      MinSize: "2"
      MaxSize: "2"
      VPCZoneIdentifier: 
        - Ref: "challengesubneta"
        - Ref: "challengesubnetb"
      Tags:
        - Key: Name
          Value: !Sub challenge-workers-Node
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/cluster/challenge
          Value: owned
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: "1"
        PauseTime: PT5M

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Ref: NodeInstanceProfile
      ImageId: "ami-027683840ad78d833"
      InstanceType: "t3.small"
      KeyName: "alisson"
      SecurityGroups:
        - Ref: challengesg
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: "10"
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh challenge 
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}
  
  # ECR Repo to store application image
  challengerepo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "challenge"
  # MySQL database to store the image data    
  challengedb: 
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Snapshot
    Properties: 
      AllocatedStorage: "5"
      DBInstanceClass: "db.t3.micro"
      DBName: "challengedb"
      Engine: MySQL
      EngineVersion: "8.0"
      MasterUserPassword: 
        Ref: DBPassword
      MasterUsername: 
        Ref: DBUser







